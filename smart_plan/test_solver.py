import unittest

from smart_plan.function import Function
from smart_plan.solver import Solver


class TestSolver(unittest.TestCase):

    def test_simple(self):
        f = Function()
        f.add_atom("r", "x", "y")
        f.set_input_variable("x")
        solver = Solver([f])
        res = solver.solve("r")
        self.assertIsNotNone(res)
        self.assertEqual(len(res), 1)

    def test_two_functions(self):
        f0 = Function()
        f0.add_atom("r", "x", "y")
        f0.set_input_variable("x")
        f1 = Function()
        f1.add_atom("r-", "x", "y")
        f1.add_atom("q", "y", "z")
        f1.set_input_variable("x")
        solver = Solver([f0, f1])
        res = solver.solve("q")
        self.assertIsNotNone(res)
        self.assertEqual(len(res), 2)

    def test_three_functions(self):
        f0 = Function()
        f0.add_atom("r", "x", "y")
        f0.set_input_variable("x")
        f1 = Function()
        f1.add_atom("r-", "x", "y")
        f1.add_atom("s", "y", "z")
        f1.set_input_variable("x")
        f2 = Function()
        f2.add_atom("s-", "x", "y")
        f2.add_atom("q", "y", "z")
        f2.set_input_variable("x")
        solver = Solver([f0, f1, f2])
        res = solver.solve("q")
        self.assertIsNotNone(res)
        self.assertEqual(len(res), 3)

    def test_four_functions(self):
        f0 = Function()
        f0.add_atom("r", "x", "y")
        f0.set_input_variable("x")
        f1 = Function()
        f1.add_atom("r-", "x", "y")
        f1.add_atom("s", "y", "z")
        f1.set_input_variable("x")
        f2 = Function()
        f2.add_atom("s-", "x", "y")
        f2.add_atom("t", "y", "z")
        f2.set_input_variable("x")
        f3 = Function()
        f3.add_atom("t-", "x", "y")
        f3.add_atom("q", "y", "z")
        f3.set_input_variable("x")
        solver = Solver([f0, f1, f2, f3])
        res = solver.solve("q")
        self.assertIsNotNone(res)
        self.assertEqual(len(res), 4)

    def test_five_functions(self):
        f0 = Function()
        f0.add_atom("r", "x", "y")
        f0.set_input_variable("x")
        f1 = Function()
        f1.add_atom("r-", "x", "y")
        f1.add_atom("s", "y", "z")
        f1.set_input_variable("x")
        f2 = Function()
        f2.add_atom("s-", "x", "y")
        f2.add_atom("t", "y", "z")
        f2.set_input_variable("x")
        f3 = Function()
        f3.add_atom("t-", "x", "y")
        f3.add_atom("u", "y", "z")
        f3.set_input_variable("x")
        f4 = Function()
        f4.add_atom("u-", "x", "y")
        f4.add_atom("q", "y", "z")
        f4.set_input_variable("x")
        solver = Solver([f0, f1, f2, f3, f4])
        res = solver.solve("q")
        self.assertIsNotNone(res)
        self.assertEqual(len(res), 5)

    def test_four_function_deeper(self):
        f0 = Function()
        f0.add_atom("u", "x", "y")
        f0.add_atom("r", "y", "z")
        f0.set_input_variable("x")
        f1 = Function()
        f1.add_atom("r-", "x", "y")
        f1.add_atom("s", "y", "z")
        f1.set_input_variable("x")
        f2 = Function()
        f2.add_atom("s-", "x", "y")
        f2.add_atom("t", "y", "z")
        f2.set_input_variable("x")
        f3 = Function()
        f3.add_atom("t-", "x", "y")
        f3.add_atom("u-", "y", "z")
        f3.add_atom("q", "z", "z'")
        f3.set_input_variable("x")
        solver = Solver([f0, f1, f2, f3])
        res = solver.solve("q")
        self.assertIsNotNone(res)
        self.assertEqual(len(res), 4)

    def test_four_function_fabian(self):
        f0 = Function()
        f0.add_atom("hasChild-", "x", "y")
        f0.add_atom("r", "y", "z")
        f0.set_input_variable("x")
        f1 = Function()
        f1.add_atom("r-", "x", "y")
        f1.add_atom("s", "y", "z")
        f1.set_input_variable("x")
        f2 = Function()
        f2.add_atom("s-", "x", "y")
        f2.add_atom("t", "y", "z")
        f2.set_input_variable("x")
        f3 = Function()
        f3.add_atom("t-", "x", "y")
        f3.add_atom("hasChild", "y", "z")
        f3.add_atom("hasBirthday", "z", "z'")
        f3.set_input_variable("x")
        solver = Solver([f0, f1, f2, f3])
        res = solver.solve("hasBirthday")
        self.assertIsNotNone(res)
        self.assertEqual(len(res), 4)

    def test_five_function_fabian(self):
        f0 = Function()
        f0.add_atom("hasChild-", "x", "y")
        f0.add_atom("r", "y", "z")
        f0.set_input_variable("x")
        f1 = Function()
        f1.add_atom("r-", "x", "y")
        f1.add_atom("s", "y", "z")
        f1.set_input_variable("x")
        f2 = Function()
        f2.add_atom("s-", "x", "y")
        f2.add_atom("u", "y", "z")
        f2.set_input_variable("x")
        f3 = Function()
        f3.add_atom("u-", "x", "y")
        f3.add_atom("t", "y", "z")
        f3.set_input_variable("x")
        f4 = Function()
        f4.add_atom("t-", "x", "y")
        f4.add_atom("hasChild", "y", "z")
        f4.add_atom("hasBirthday", "z", "z'")
        f4.set_input_variable("x")
        solver = Solver([f0, f1, f2, f3, f4])
        res = solver.solve("hasBirthday")
        self.assertIsNotNone(res)
        self.assertEqual(len(res), 5)

    def test_five_function_fabian_missing_function(self):
        f0 = Function()
        f0.add_atom("hasChild-", "x", "y")
        f0.add_atom("r", "y", "z")
        f0.set_input_variable("x")
        f1 = Function()
        f1.add_atom("r-", "x", "y")
        f1.add_atom("s", "y", "z")
        f1.set_input_variable("x")
        f2 = Function()
        f2.add_atom("s-", "x", "y")
        f2.add_atom("u", "y", "z")
        f2.set_input_variable("x")
        f3 = Function()
        f3.add_atom("u-", "x", "y")
        f3.add_atom("t", "y", "z")
        f3.set_input_variable("x")
        solver = Solver([f0, f1, f2, f3])
        res = solver.solve("hasBirthday")
        self.assertIsNone(res)


if __name__ == '__main__':
    unittest.main()
